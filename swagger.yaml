openapi: 3.0.1
info:
  version: "1.0.0"
  title: Ad Service
  description: 'This is a sample server Ad Service.'
  contact:
    email: oleh.ratinskyi.knm.2020@lpnu.ua
  license:
    name: SmartBear License
    url: http://license.foo.com
servers:
  - url: http://localhost:5000
    description: Dev Server
tags:
- name: ad
  description: Everything about your Ads
- name: user
  description: Operations about user

paths: 
  /ad:
    post:
      tags:
      - ad
      summary: Create an ad
      description: Creates a new ad in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ad'
          application/xml:
            schema:
              $ref: '#/components/schemas/Ad'
      responses:
        200:
          description: Successfully created a new ad
        405:
          description: Invalid input
          content: {}
      security:
      - ad_auth:
        - write:ad
        - read:ad
      x-codegen-request-body-name: body
          
  /ad/{id}:
    get:
      tags:
      - ad
      summary: Get an ad
      description: Obtain information about specific ad
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ad'
        400:
          description: Invalid ID supplied.
          content: {}
        404:
          description: An ad with the specified ID was not found.
          content: {}
                
    put:
      tags:
      - ad
      summary: Update an ad
      description: Update specific ad
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ad'
        400:
          description: Invalid ID supplied.
          content: {}
        404:
          description: An ad with the specified ID was not found.
          content: {}
      security:
      - ad_auth:
        - write:ad
        - read:ad
    
    delete:
      tags:
      - ad
      summary: Delete an ad
      description: Delete specific ad
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
            
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ad'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - ad_auth:
        - write:ad
        - read:ad
  
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "Created a new user."
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Can not create a new user. User with such username already exists."
      x-codegen-request-body-name: body

  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
          
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - api_key: []
          
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []
        
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []
      x-codegen-request-body-name: body
    
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []

components:
  schemas:
    Location:
      type: object
      properties:
        id: 
          type: integer
          format: uuid
        name:
          type: string
      xml:
        name: Board
    
    Ad:
      required:
      - id
      - name
      - text
      - price
      - currency
      - date
      - userId
      type: object
      properties:
        id: 
          type: integer
          format: uuid
          example: 4
        name:
          type: string
          example: Sell boots
        text:
          type: string
          example: Mustang boots with warm fur inside, size 43, manufacturer Portugal
        price:
          type: number
          example: 123.56
        currency:
          type: string
          example: USD
        date:
          type: string
          format: date
          example: "2019-05-17"
        locationId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
          
      xml:
        name: Ad
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: uuid
        username:
          type: string
        email:
          type: string
        password:
          type: string
        locationId:
          type: integer
          format: int64
      xml:
        name: User
    
  securitySchemes:
    ad_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5000
          scopes:
            write:ad: modify ads in your account
            read:ad: read your ads
    api_key:
      type: apiKey
      name: api_key
      in: header